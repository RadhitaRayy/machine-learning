# -*- coding: utf-8 -*-
"""Final_Poject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/RadhitaRayy/machine-learning/blob/main/Final_Poject.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import streamlit as st
import streamlit.components.v1 as stc

df = pd.read_csv ('heart.csv')

df.head()

df.shape

"""##PRAPROCESSING"""

df.columns = df.columns.str.lower()

# Menampilkan hasil
print(df)

df['sex'] = df['sex'].map({'F': 0, 'M': 1})

df['chestpaintype'] = df['chestpaintype'].map({'ATA': 0, 'NAP': 1, 'ASY': 2})

df['restingecg'] = df['restingecg'].map({'Normal': 0, 'ST': 1})

df['exerciseangina'] = df['exerciseangina'].map({'N': 0, 'Y': 1})

df['st_slope'] = df['st_slope'].map({'Up': 0, 'Flat': 1, 'Down': 2})

df.describe()

df.isnull().sum()

df.dropna(subset=['chestpaintype'], inplace=True)

df.dropna(subset=['restingecg'], inplace=True)

df.dropna(subset=['st_slope'], inplace=True)

df['chestpaintype'] = df['chestpaintype'].astype(int)

df['restingecg'] = df['restingecg'].astype(int)

df['st_slope'] = df['st_slope'].astype(int)

df.head()

df.isnull().sum()

df.info()

df['heartdisease'].value_counts()

"""##EDA"""

# Heatmap Korelasi
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Heatmap Korelasi')
plt.show()

# Distribusi HeartDisease
plt.figure(figsize=(8, 5))
sns.countplot(x='heartdisease', data=df)
plt.title('Distribusi HeartDisease')
plt.show()

# Analisis Bivariat: Variabel Numerik vs. HeartDisease
num_columns = ['age', 'restingbp', 'cholesterol', 'maxhr', 'oldpeak']

plt.figure(figsize=(15, 10))
for i, col in enumerate(num_columns):
    plt.subplot(2, 3, i + 1)
    sns.boxplot(x='heartdisease', y=col, data=df)
    plt.title(f'Distribusi {col} Berdasarkan HeartDisease')
plt.tight_layout()
plt.show()

# Pairplot
sns.pairplot(df, hue='heartdisease', vars=num_columns)
plt.show()

"""##MODEL"""

x = df.drop(columns='heartdisease', axis=1)
y = df['heartdisease']

print(x)

print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, x_train.shape,x_test.shape)

model = LogisticRegression()

model.fit(x_train, y_train)

"""##evaluasi"""

x_train_predicition = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_predicition, y_train)

print('akurasi data training :', training_data_accuracy)

x_test_predicition = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_predicition, y_test)

print('akurasi data testing :', test_data_accuracy)

"""##PREDIKSI"""

input_data = (40,1,0,140,289,0,0,172,0,0.0,0)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
  print ('Pasien Tidak Terkena Penyakit Jantung')
else:
  print ('Pasien Terkena Penyakit Jantung')

"""##SIMPAN MODEL"""

import pickle

filename = 'finalized_model.sav'
pickle.dump(model, open(filename, 'wb'))

